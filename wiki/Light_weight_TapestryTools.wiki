#summary Light weight TapestryTools.
#labels Featured

= Introduction =

We build an Eclipse WTP based Tapestry 5 visual editor as GSoC 2011 project, called it TapestryTools (http://code.google.com/p/tapestrytools/). Now, it can works well on Eclipse Helios/Indigo. But there are still some problems:

 * 1. It is built on Eclipse WTP, too heavyweight, hard to install, users must install all the WTP plugins to run TapestryTools. Many tapestry developers want to use TapestryTools, but failed in its install process. Or some other users just do not want to install such a heavy tool, they need a more smart, more simpler and more efficient tool.

 * 2. Hard to maintain and improve, once Eclipse WTP version changes, we must do some corresponding job to keep synchronous with Eclipse WTP's release version. It is repeated and boring. Even there are some users want to improve TapestryTools with me together, after they know that must start with WTP source code, they gave it up. Eclipse WTP is powerful, meanwhile, its source code is too complex to extend. 

After my GSoC mentor Igor Drobiazko suggested, and discussion with Tapestry developers and users in mail list. We noticed that people a brand new simple tool which supplies some special practical and facile Tapestry 5 features, and it can run without WTP.

= Light weight TapestryTool design =

The brand new lightweight TapestryTools will be just a normal Eclipse plug-in, does not need many special dependencies, more focus, easy to install, easy to use. And also, we can supply practical and welcomed features:

== Must have features ==

=== 1. Easy install===

It will be very easy to install the brand new TapestryTools in different Eclipse version, supply good compatibility between different versions.

=== 2. Tapestry wizards ===

It will still supply Tapestry 5 page and component creation wizard.
[http://tapestrytools.googlecode.com/files/wizard1.png] 

=== 3. Convenient switch ===

Users can use command to switch between tml file and corresponding java, It shoule be possible both by menu and short keys, we use "CTRL + R" in PC and "COMMAND + R" in Mac.
[http://tapestrytools.googlecode.com/files/42.png] 

=== 4. XML editor based .tml editor ===

=== 5. Autocompletion features ===

This light weight TapestryTools will still supply autocompletion features, includes three mainly aspects:

  * Autocomplete of properties from the .java page when editing the .tml file

For example, there is such a method in Test.java:
{{{
public String getName(){
 return "Gavin Lei";
}
}}}
Then, in Test.tml, once you typed {{{ ${ }}}, you can get "name" and "getName" in content assist list.
[http://tapestrytools.googlecode.com/files/autocomplete1.png] 
[http://tapestrytools.googlecode.com/files/autocomplete2.png] 

 * Tapestry components and corresponding attributes autocomplete feature

If we want to add actionlink component, such as: 
{{{
<t:actionlink t:id="logout">Log out</t:actionlink> 
}}}
In blank space, pop up content assist, it is "ALT + /" in my Eclipse, all the Tapestry 5 components will be list in content assist, just select "ActionLink", it will insert corresponding code for you.

Or when you type 
{{{
<t: 
}}}
the content assist dialog comes up, you can choose one from the list and then completes it with the required parameters listed. 

 * Components attribute value autocomplete feature

Suppose there is an ActionLink component in current .tml file 
{{{<t:actionlink  >delete</t:actionlink>}}}
We want to add some attribute for this component, place the curson here

{{{
<t:actionlink
}}}

Pop up content assist, it will come up with a list of component attributes that we can use here, we can select attribute names in the list.
[http://tapestrytools.googlecode.com/files/autocomplete3.png] 

Suppose that we define a pagelink component in Java class file: 
{{{
@Component(parameters = { "page=start" }) 
private PageLink goToStart; 
}}}

and we want to use it in .tml file: 
{{{
<span t:id="goToStart">Log out</span> 
}}}
So when we type 
{{{
<span t:id=" 
}}}
it will also come up with a list of components that we can use here, we can select goToStart component name in the list.

== Optional Features ==

If we have enough time in GSoC period, we also plan to supply these features:

1. Import Tapestry jar of special version to project
2. Validation function in Tapestry .tml file source view
   Supplies semantic validation of the Tapestry standard tag libraries for both EL and non-EL attribute values in .tml file
3. Hyperlink function in Tapestry .tml file source view
   Hyperlink to the Java editor from property and method referenced in the Expression Language(EL) of a tag-attribute, click (CTRL + property or method ), it will jump to the corresponding Java Classfile.