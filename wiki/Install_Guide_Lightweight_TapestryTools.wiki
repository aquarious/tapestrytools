#summary Lightweight TapestryTools install guide.

= Install =

NOTE: Support Eclipse *Indigo* and *Juno (4.2)* only, not Helios yet :-)

== Solution 1 ==

Help -> Eclipse Marketplace..., input "tapestrytools", search, then you can find tapestrytools and install it. So easy, isn't it :-)

[http://tapestrytools.googlecode.com/files/marketplace.png]

== Solution 2 ==

Open your Eclipse *Indigo/Juno* (recommend *eclipse-java* version or *eclipse-jee* version), click:

Help -> Install new software, then input lightweight TapestryTools update site url:

http://tapestrytools.googlecode.com/svn/TapestryTools/

Check TapestryToolsFeature, click next to start instal process.

[http://tapestrytools.googlecode.com/files/gsoc_2012_install.png]

 * NOTE: If you are using Eclipse-sdk version which has no XML editor installed, please confirm check "Contact all update sites during install to find required software".


= Finished features by now=

== 1. TML editor ==

[http://tapestrytools.googlecode.com/files/gsoc_2012_1.png]

== 2. Tapestry 5 components content assist ==

[http://tapestrytools.googlecode.com/files/gsoc_2012_2.png]

== 3. Tapestry 5 component attributes content assist ==

[http://tapestrytools.googlecode.com/files/gsoc_2012_3.png]

== 4. Tapestry Template/Java file switch feature (CTRL + R command) ==

[http://tapestrytools.googlecode.com/files/CTRLR.png]

== 5. Tapestry class attributes/methods support in content assist of TML editor ==

[http://tapestrytools.googlecode.com/files/tapestryentities.png]

== 6. Message support in TML's content assist ==

When type ${message: and then cmd + space, all the available messages for the page will be suggested in the content assist list.

[http://tapestrytools.googlecode.com/files/message_contentassist.png]

== 7. Custom components support ==

In TapestryTools' components auto-complete feature, by default only components defined in these two packages are in the list:
 * org.apache.tapestry5.corelib.components (Tapestry 5's build-in components)
 * app-package.components, whereby app-package is the applications root package defined in the web.xml (Tapestry web application's root components)

Besides these components, TapestryTools support also custom components with different prefix with "t:". It allow you to provide autocompletion for custom components from different libraries, and we have a nice editor in which a developer enters a mapping:
 * x: org.example.components
 * y: org.acme.lib.components
In this mapping, a library prefix is mapped to a component package. So, every component from org.example.components package would have x prefix. For example:

{{{<span t:type="x/MyComponent"></span>}}}

{{{<span t:type="y/Foo"></span>}}}

=== 7.1 Add custom components support for Tapestry application ===

[http://tapestrytools.googlecode.com/files/customsupport_1.png]

=== 7.2 Edit custom components libraries mapping ===

[http://tapestrytools.googlecode.com/files/customsupport_2.png]